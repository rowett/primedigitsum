#! /bin/bash
# run prime search in parallel over multiple processor threads
# auto start at last successfully completed block
# Usage:
# pards [-b] [-d directory] [-r starting radix] [-s starting block] [-t threads]
#   -b          benchmark mode
#   -d		results directory
#   -r          starting radix
#   -s          starting block number
#   -t          number of CPU threads to use

# set program name and command usage
prog_name=`basename $0`
usage="$prog_name [-b] [-d directory] [-r radix] [-s start] [-t threads]\n  -b\tbenchmark mode\n  -d\tresults directory\n  -r\tstarting radix\n  -s\tstarting block number\n  -t\tnumber of CPU threads\n"

# report error and exit
error_exit() {
	s_red=`tput setaf 1`
	s_standard=`tput setaf 7`
	echo -e "${s_red}${prog_name}: $1${s_standard}\n$usage"
	exit 1
}

# read number of processors
processors=`nproc`
num_threads=$processors

# block directory
dir=blocks

# starting block
block_num=0
block_specified=0

# maximum number base for digit sum primes
max_base=40

# minimum number base for digit sum primes
min_base=2
min_base_specified=0

# whether in benchmark mode
benchmark=0

# regular expression for number validation
re='^[0-9]+$'

# check for valid options
while getopts "bd:r:s:t:" opt
do
	case "$opt" in
        # benchmark mode
        b)      benchmark=1
                ;;

	# blocks directory
	d)	dir=$OPTARG
		# check it is a directory
		if [[ ! -d "$dir" ]]
		then
			error_exit "$dir: no such directory"
		fi
		;;

	# starting number base for digit sum primes
	r)	min_base=$OPTARG
                min_base_specified=1
		# check it is a number
		if ! [[ $min_base =~ $re ]]
		then
			error_exit "radix must be a number"
		else
			# check it is in range
			if [[ $min_base -lt 2 || $min_base -gt $max_base ]]
			then
				error_exit "radix must be from 2 to $max_base"
			fi
		fi
		;;

        # starting block number
        s)      block_num=$OPTARG
                block_specified=1
		# check it is a number
		if ! [[ $block_num =~ $re ]]
		then
			error_exit "starting block must be a number"
		fi
		;;

	# number of threads
	t)	num_threads=$OPTARG
		# check it is a number
		if ! [[ $num_threads =~ $re ]]
		then
			error_exit "threads must be a number"
		else
			# check it is in range
			if [[ $num_threads -lt 1 || $num_threads -gt $processors ]]
			then
				error_exit "threads must be from 1 to $processors"
			fi
		fi
		;;

	# other flags are invalid
	\?)	error_exit "invalid argument $OPTARG"
	esac
done
shift $((OPTIND-1))

# number of zeroes to add to block number
if [[ $benchmark == 1 ]]
then
    zeroes=00000000000
else
    zeroes=000000000000
fi

# check the directory exists
if [[ ! -d "$dir" ]]
then
	echo "`basename $0`: $dir: no such directory"
	exit 1
fi

# check for partial blocks
echo "Checking for unfinished blocks..."
set -- $dir/*.txt
if [[ -e $1 ]]
then
    # tidy any partial blocks
    partials=`grep -L "Time" $dir/*.txt`
    for current in $partials
    do
        echo "Deleted unfinished block $current"
        rm -f $current
    done
fi

# remove temporary conversion files
rm -f $dir/*.tmp

# attempt to find latest block if one not specified
if [[ $block_specified == 0 ]]
then
    echo "Finding latest block..."
    latest_block=`ls $dir | sort -n | tail -1 | sed 's/.txt//'`
    if [[ $latest_block =~ $re ]]
    then
        block_num=$latest_block
    fi
fi

# attempt to find latest result if minimum base not specified
if [[ $min_base_specified == 0 ]]
then
    latest_result=`./results -d $dir | head -2 | tail -1 | cut -f 1`
    if [[ $latest_result =~ $re ]]
    then
        min_base=$((latest_result+2))
    fi
fi

# skip blocks already processed
while [[ -e $dir/$block_num.txt ]]
do
        block_num=$((block_num+1))
done


# output header
if [[ $num_threads == $processors ]]
then
        echo "Using all $num_threads processor threads"
else
        echo "Using $num_threads of $processors processor threads"
fi
echo "Starting block: $block_num"
echo "Block size: 1${zeroes}"
echo "Number bases: $min_base to $max_base"
echo "Results directory: $dir"

# start a block on each processor thread
proc_num=0
active_blocks=""
while [[ $proc_num -lt $num_threads ]]
do
        # compute the start and end of the range
        start_num=$block_num$zeroes
        end_num=$((block_num+1))$zeroes
        
        # start the block
        date=`date`
        echo "Started block $block_num on thread $proc_num [$date] $min_base $max_base"
        active_blocks="$active_blocks $block_num"
        (./ds $start_num $end_num $min_base $max_base > $dir/$block_num.tmp; mv $dir/$block_num.tmp $dir/$block_num.txt) &

        # find the next unprocessed block number
        block_num=$((block_num+1))
        while [[ -e $dir/$block_num.txt ]]
        do
                block_num=$((block_num+1))
        done

        # increment processor number
        proc_num=$((proc_num+1))
done

# if in benchmark mode then wait for subprocess to complete and exit
if [[ $benchmark == 1 ]]
then
    echo "Waiting for benchmark to complete..."
    wait
    exit 0
fi

# check for completed blocks and start new ones
while [[ true ]]
do
        # wait for check interval
        sleep 2

        # update active list
        new_active=""
        for current in $active_blocks
        do
                # check if the block is still processing
                if [[ -e $dir/$current.tmp ]]
                then
                        # still processing so add to new active list
                        new_active="$new_active $current"
                else
                        # completed so find next unprocessed block
                        while [[ -e $dir/$block_num.txt ]]
                        do
                                block_num=$((block_num+1))
                        done

                        # get processing time from completed block
                        time=`grep "Time:" $dir/${current}.txt | sed "s/Time: //"`
                        
                        # get highest consecutive primes
                        highest=`grep "^No matches" $dir/${current}.txt | sed "s/^No matches after \([^ ][^ ]*\).*/\1/"`
                        if ! [[ $highest == "" || $highest == "--" ]]
                        then
                                highest=$((highest+2))
                                if [[ $highest -gt $min_base ]]
                                then
                                    min_base=$highest
                                fi
                                echo "Found $((highest-2))!"
                        fi

                        # start new block
                        date=`date`
                        echo "Started block $block_num after $current completed in $time [$date] $min_base $max_base"

                        # compute the start and end of the range
                        start_num=$block_num$zeroes
                        end_num=$((block_num+1))$zeroes

                        # invoke search
                        (./ds $start_num $end_num $min_base $max_base > $dir/$block_num.tmp; mv $dir/$block_num.tmp $dir/$block_num.txt) &

                        new_active="$new_active $block_num"
                        block_num=$((block_num+1))
                fi
        done

        # update the active list
        active_blocks=$new_active
done

